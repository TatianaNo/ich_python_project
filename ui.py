# UI module for user interaction

menu = {
    "1": "–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É", 
    "2": "–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≥–æ–¥–æ–≤",
    "3": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
    "9": "–í—ã—Ö–æ–¥"
}

def show_menu():
    """Display the main menu to the user."""
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    for key, value in menu.items():
        print(f"{key}. {value}")

def get_menu_choice():
    """Get menu choice from user with validation."""
    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()
        if choice in menu.keys():
            return choice
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def get_search_keyword():
    """Get search keyword from user."""
    keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
    if not keyword:
        print("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return get_search_keyword()
    return keyword

def get_genre_and_year_range():
    """Get genre and year range from user."""
    print("\n–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≥–æ–¥–æ–≤:")
    
    # Get genre
    genre = input("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    # Get year range
    year_from = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    year_to = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    # Validate years
    if year_from:
        try:
            year_from = int(year_from)
        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            year_from = None
    else:
        year_from = None
        
    if year_to:
        try:
            year_to = int(year_to)
        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            year_to = None
    else:
        year_to = None
    
    return {
        'genre': genre if genre else None,
        'year_from': year_from,
        'year_to': year_to
    }

def display_film(film):
    """Display a single film information."""
    if not film:
        print("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    print("\n" + "="*50)
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {film.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    print(f"–ì–æ–¥: {film.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"–ñ–∞–Ω—Ä: {film.get('genre', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"–†–µ–π—Ç–∏–Ω–≥: {film.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {film.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    print("="*50)

def display_films(films):
    """Display a list of films."""
    if not films:
        print("\n–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(films)} —Ñ–∏–ª—å–º(–æ–≤):")
    for i, film in enumerate(films, 1):
        print(f"\n{i}. {film.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({film.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')})")
        print(f"   –ñ–∞–Ω—Ä: {film.get('genre', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"   –†–µ–π—Ç–∏–Ω–≥: {film.get('rating', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

def display_popular_queries():
    """Display popular or recent queries from MongoDB."""
    from db import get_popular_queries, get_recent_queries
    
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–û–í–´–• –ó–ê–ü–†–û–°–û–í")
    print("="*60)
    
    # Show popular queries
    print("\nüî• –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    popular = get_popular_queries(5)
    
    if popular:
        for i, query in enumerate(popular, 1):
            print(f"{i}. '{query['_id']}' - {query['count']} —Ä–∞–∑(–∞)")
            print(f"   –¢–∏–ø: {query['search_type']}, –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫: {query['last_searched'].strftime('%Y-%m-%d %H:%M')}")
    else:
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
    
    # Show recent queries
    print("\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:")
    recent = get_recent_queries(5)
    
    if recent:
        for i, query in enumerate(recent, 1):
            print(f"{i}. '{query['query']}' - {query['timestamp'].strftime('%Y-%m-%d %H:%M')}")
            print(f"   –¢–∏–ø: {query['search_type']}, –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {query['results_count']}")
    else:
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
    
    print("="*60)
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def show_exit_message():
    """Display exit message."""
    print("\n–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

def ask_continue():
    """Ask user if they want to continue with more results."""
    choice = input("\n–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤? (y/n): ").strip().lower()
    return choice in ['y', 'yes', '–¥–∞', '–¥']
